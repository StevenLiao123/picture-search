{"version":3,"sources":["app/api/index.js","app/utils/storageUtils.js","app/redux/actions.js","app/redux/action-types.js","app/SearchArea/SearhByCoordinate/SearchByCoordinate.js","app/config/locationConfig.js","app/SearchArea/SearchByLocation/add-form.js","app/SearchArea/SearchByLocation/SearchByLocation.js","app/SearchArea/SearchArea.js","app/Gallery/Gallery.js","app/FavouritesList/FavouritesList.js","app/App.js","app/redux/reducer.js","app/redux/store.js","serviceWorker.js","index.js"],"names":["fetchAllPicturesByGeolocationAjax","lat","lon","page","axios","get","process","data","store","set","remove","setLatitude","type","setLongtitude","receivePhotosDataSuccess","receivePhotosData","dispatch","a","result","storageUtils","message","success","error","layout","labelCol","span","wrapperCol","tailLayout","offset","SearchByCoordinate","onFinish","values","props","setLatitudeValue","setLongtitudeValue","name","initialValues","remember","onFinishFailed","errorInfo","className","Item","label","rules","required","htmlType","Component","connect","locationList","AddForm","state","location","setState","getLocation","Option","Select","SearchByLocation","getOptions","map","key","value","showAddModal","showModalStatus","isEmptyObject","obj","n","addLocation","push","options","handleCancel","this","selectedLocation","find","style","marginRight","marginBottom","onClick","title","visible","onOk","onCancel","Gallery","addPhotoToList","photo","addPhotosToFavouritesList","getCard","photosData","photos","md","xs","id","hoverable","bordered","textAlign","cover","alt","src","farm","server","secret","getNextPage","latitude","longtitude","pageNumber","photosDataPage","pages","resetPhotos","stat","to","gutter","length","lg","Latitude","Longtitude","PhotosData","FavouritesList","favouritesPhoto","FavouritesPhotos","path","exact","component","initialPhotosData","initialPhotos","combineReducers","action","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.edbd9038.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL_BASE =  \"https://www.flickr.com/services/rest\";\n\nexport const fetchAllPicturesByGeolocationAjax = (lat, lon, page) => axios.get(`${URL_BASE}/?method=flickr.photos.search&api_key=${process.env.REACT_APP_API_KEY}&lat=${lat}&lon=${lon}&per_page=10&page=${page}&format=json&nojsoncallback=1`);\n","/*\n    used to save data in local storage\n*/\nimport store from \"store\";\n\nconst DATA_KEY = \"data_key\";\n\nexport default {\n  // save photo data\n  savePhotosData(data) {\n    store.set(DATA_KEY, data);\n  },\n\n  // read photo data\n  getPhotosData() {\n    return store.get(DATA_KEY) || {};\n  },\n\n  // delete photo data\n  removePhotosData() {\n    store.remove(DATA_KEY);\n  },\n};\n","/*\n    The module includes some functions of action creator\n*/\n\nimport { \n    SET_LATITUDE, \n    SET_LONGTITUDE,\n    RECEIVE_PHOTOS_DATA,\n    ADD_PHOTOS_TO_FAVOURITES_LIST,\n    RESET_PHOTOS_DATA\n} from './action-types';\n\nimport { fetchAllPicturesByGeolocationAjax } from '../api';\nimport { message } from 'antd';\nimport storageUtils from '../utils/storageUtils';\n\n// synchronous \nexport const setLatitude = (lat) => ({\n    type: SET_LATITUDE,\n    lat: lat\n});\n\nexport const setLongtitude = (lon) => ({\n    type: SET_LONGTITUDE,\n    lon: lon\n});\n\nexport const addPhotosToFavouritesList = (photo) => ({\n    type: ADD_PHOTOS_TO_FAVOURITES_LIST,\n    photo: photo\n});\n\nexport const receivePhotosDataSuccess = (data) => ({\n    type: RECEIVE_PHOTOS_DATA,\n    data\n});\n\nexport const resetPhotosData = () => {\n    // delete the photos data in the local storage\n    storageUtils.removePhotosData();\n\n    //return action\n    return {type: RESET_PHOTOS_DATA}\n};\n\n// asynchronous\nexport const receivePhotosData = (lat, lon, page) => {\n    return async dispatch => {\n        const result = await fetchAllPicturesByGeolocationAjax(lat, lon, page);\n        if (result) {\n            const data = result.data;\n            // save the data to the local storage\n            storageUtils.savePhotosData(data);\n            message.success('receive photos data successful!'); \n            dispatch(receivePhotosDataSuccess(data));\n        } else {\n            message.error(result.data.message);\n        }\n    } \n};\n","/*\n    The moudle includes constants for actions\n*/\n\nexport const SET_LATITUDE = \"SET_LATITUDE\"; // set the latitude\nexport const SET_LONGTITUDE = \"SET_LONGTITUDE\"; // set the latitude\nexport const RECEIVE_PHOTOS_DATA = \"RECEIVE_PHOTOS_DATA\"; // receive the data of photos\nexport const RESET_PHOTOS_DATA = \"RESET_PHOTOS_DATA\"; // receive the data of photos\nexport const ADD_PHOTOS_TO_FAVOURITES_LIST = \"ADD_PHOTOS_TO_FAVOURITES_LIST\"; // set the latitude","import React, { Component } from \"react\";\nimport { Form, Input, Button, message } from \"antd\";\nimport { connect } from 'react-redux';\nimport { setLatitude, setLongtitude, receivePhotosData } from '../../redux/actions';\nimport \"./SearchByCoordinate.css\";\n\nconst layout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 12\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 6,\n    span: 12\n  }\n};\n\nclass SearchByCoordinate extends Component {\n  render() {\n    const onFinish = async values => {\n      this.props.receivePhotosData(values.lat, values.lon, 1);\n      this.props.setLatitudeValue(values.lat);\n      this.props.setLongtitudeValue(values.lon);\n    };\n\n    const onFinishFailed = errorInfo => {\n      message.error(\"Please input the right latitude and longtitude!\");\n    };\n\n    return (\n      <Form\n        {...layout}\n        name=\"basic\"\n        initialValues={{\n          remember: true\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        className=\"search-by-coordinate\"\n      >\n        <Form.Item\n          label=\"Latitude\"\n          name=\"lat\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input latitude!\"\n            }\n          ]}\n        >\n          <Input type=\"number\"/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Longtitude\"\n          name=\"lon\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input longtitude!\"\n            }\n          ]}\n        >\n          <Input type=\"number\"/>\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Search\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setLatitudeValue: (lat) => dispatch(setLatitude(lat)),\n    setLongtitudeValue: (lon) => dispatch(setLongtitude(lon)),\n    receivePhotosData: (lat, lon, page) => dispatch(receivePhotosData(lat, lon, page)),\n  }\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchByCoordinate);\n","const locationList = [\n    {\n        name: 'Sydney',\n        lat: -33.8548157,\n        lon: 151.2164539\n    },\n    {\n        name: 'Brisbane',\n        lat: -27.4689682,\n        lon: 153.0234991\n    },\n    {\n        name: 'Perth',\n        lat: -31.9527121,\n        lon: 115.8604796\n    },\n    {\n        name: 'Melbourne',\n        lat: 37.8136,\n        lon: 144.9631\n    },\n    {\n        name: 'Adelaide',\n        lat: 34.9285,\n        lon: 138.6007\n    },\n];\n\nexport default locationList;","import React, { Component } from \"react\";\nimport { Form, Input, Button, message } from \"antd\";\n\nconst layout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 12\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 6,\n    span: 12\n  }\n};\n\nclass AddForm extends Component {\n  state = {\n    location: {},\n  };\n\n  render() {\n    const onFinish = values => {\n      this.setState({\n          location: values\n      }, () => {\n        this.props.getLocation(this.state.location);\n      })\n    };\n\n    const onFinishFailed = errorInfo => {\n      message.error(\"Please input the name, latitude and longtitude!\");\n    };\n\n    return (\n      <Form\n        {...layout}\n        name=\"basic\"\n        initialValues={{\n          remember: true\n        }}\n        onFinishFailed={onFinishFailed}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          label=\"Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input name!\"\n            }\n          ]}\n        >\n          <Input type=\"string\"/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Latitude\"\n          name=\"lat\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input latitude!\"\n            }\n          ]}\n        >\n          <Input type=\"number\"/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Longtitude\"\n          name=\"lon\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input longtitude!\"\n            }\n          ]}\n        >\n          <Input type=\"number\"/>\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Confirm\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nexport default AddForm;\n","import React, { Component } from \"react\";\nimport { Form, Select, Button, Modal, message } from \"antd\";\nimport locationList from \"../../config/locationConfig\";\nimport { connect } from 'react-redux';\nimport { setLatitude, setLongtitude, receivePhotosData } from '../../redux/actions';\nimport AddForm from \"./add-form\";\nimport \"./SearchByLocation.css\";\n\nconst { Option } = Select;\n\nconst layout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 12\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 6,\n    span: 12\n  }\n};\n\nclass SearchByLocation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      location: {},\n      showModalStatus: 0 // the status of modal, 0: both are hidden, 1: show add modal\n    };\n  }\n\n  getOptions = locationList => {\n    return locationList.map(location => (\n      <Option key={location.name || null} value={location.name}>\n        {location.name}\n      </Option>\n    ));\n  };\n\n  showAddModal = () => {\n    this.setState({\n      showModalStatus: 1\n    });\n  };\n\n  isEmptyObject = obj => {\n    for (var n in obj) {\n      return false;\n    }\n    return true;\n  };\n\n  addLocation = () => {\n    if(!this.isEmptyObject(this.state.location)) {\n      locationList.push(this.state.location);\n      this.options = this.getOptions(locationList);\n      this.setState({\n        showModalStatus: 0\n      });\n    } else {\n      message.error(\"Please press confirm button first!\");\n    }\n\n  };\n\n  // hide the modal\n  handleCancel = () => {\n    this.setState({\n      showModalStatus: 0\n    });\n  };\n\n  getLocation = location => {\n    this.setState({\n      location\n    });\n  };\n\n  componentWillMount() {\n    this.options = this.getOptions(locationList);\n  }\n\n  render() {\n    const { showModalStatus } = this.state;\n\n    const onFinish = async values => {\n      const selectedLocation = locationList.find(location => location.name === values.location);\n      this.props.receivePhotosData(selectedLocation.lat, selectedLocation.lon, 1);\n      this.props.setLatitudeValue(selectedLocation.lat);\n      this.props.setLongtitudeValue(selectedLocation.lon);\n    };\n\n    const onFinishFailed = errorInfo => {\n      message.error(\"Please input the right location!\");\n    };\n\n    return (\n      <Form\n        {...layout}\n        name=\"basic\"\n        initialValues={{\n          remember: true\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        className=\"search-by-location\"\n      >\n        <Form.Item\n          label=\"Location\"\n          name=\"location\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input location!\"\n            }\n          ]}\n        >\n          <Select>{this.options}</Select>\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{ marginRight: \"15px\", marginBottom: \"15px\" }}\n          >\n            Search\n          </Button>\n          <Button type=\"primary\" onClick={this.showAddModal}>\n            Add location\n          </Button>\n        </Form.Item>\n\n        <Modal\n          title=\"Add a location\"\n          visible={showModalStatus === 1}\n          onOk={this.addLocation}\n          onCancel={this.handleCancel}\n        >\n          <AddForm getLocation={this.getLocation}/>\n        </Modal>\n      </Form>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setLatitudeValue: (lat) => dispatch(setLatitude(lat)),\n    setLongtitudeValue: (lon) => dispatch(setLongtitude(lon)),\n    receivePhotosData: (lat, lon, page) => dispatch(receivePhotosData(lat, lon, page)),\n  }\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchByLocation);\n","import React from \"react\";\nimport SearchByCoordinate from \"./SearhByCoordinate\";\nimport SearchByLocation from \"./SearchByLocation\";\n\nimport \"./SearchArea.css\";\n\nexport default () => {\n  return (\n    <div className=\"search-area\">\n      <h1>Search Area</h1>\n      <div className=\"search-area-forms\">\n        <SearchByCoordinate />\n        <SearchByLocation />\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { Card, Col, Row, Button, message } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport {\n  receivePhotosData,\n  addPhotosToFavouritesList,\n  resetPhotosData\n} from \"../redux/actions\";\nimport { connect } from \"react-redux\";\nimport \"./Gallery.css\";\n\nclass Gallery extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page: 2\n    };\n  }\n\n  addPhotoToList = (photo) => {\n    this.props.addPhotosToFavouritesList(photo)\n    message.success(\"Save to favourist list!\");\n  }\n\n  getCard = () => {\n    return this.props.photosData.photos.photo.map(photo => (\n      <Col md={12} xs={24} key={photo.id}>\n        <Card\n          hoverable\n          title={photo.title}\n          bordered={false}\n          style={{ marginBottom: \"10px\", textAlign: \"center\" }}\n          cover={\n            <img\n              alt={photo.title}\n              src={`https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_b.jpg`}\n            />\n          }\n        >\n          <Button\n            type=\"primary\"\n            onClick={() => this.addPhotoToList(photo)}\n          >\n            Add to list\n          </Button>\n        </Card>\n      </Col>\n    ));\n  };\n\n  isEmptyObject = obj => {\n    for (var n in obj) {\n      return false;\n    }\n    return true;\n  };\n\n  getNextPage = async () => {\n    const { latitude, longtitude, photosData } = this.props;\n    const { page } = this.state;\n    let pageNumber = page;\n    let photosDataPage = !this.isEmptyObject(photosData)\n      ? photosData.photos.pages\n      : null;\n    if (pageNumber <= photosDataPage) {\n      pageNumber = pageNumber + 1;\n      this.setState(\n        {\n          page: pageNumber\n        },\n        () => this.props.receivePhotosData(latitude, longtitude, page)\n      );\n    } else {\n      message.error(\"Sorry, no more images for this position.\");\n    }\n  };\n\n  resetPhotos = () => {\n    this.props.resetPhotos();\n  };\n\n  render() {\n    const { photosData } = this.props;\n    const photo = photosData.stat === \"ok\" ? photosData.photos.photo : {};\n\n    return (\n      <div className=\"gallery\">\n        <h1>Gallery</h1>\n        <div className=\"gallery-reset-list\">\n          {!this.isEmptyObject(photosData) ? (\n            <Button type=\"link\" onClick={this.resetPhotos}>\n              Reset photo\n            </Button>\n          ) : null}\n          <Link to=\"/favourites-list\">Favourites-list -></Link>\n        </div>\n        <div className=\"gallery-next-page\">\n          {!this.isEmptyObject(photosData) ? (\n            <Button type=\"link\" onClick={this.getNextPage}>\n              Next page\n            </Button>\n          ) : null}\n        </div>\n        <Row gutter={16}>\n          {photo.length !== 0 && photosData.stat === \"ok\" ? (\n            this.getCard()\n          ) : (\n            <Col lg={8} md={12} xs={24}>\n              <h1>Sorry, no images for this position.</h1>\n            </Col>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n\nGallery.propTypes = {\n  photosData: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    latitude: state.Latitude,\n    longtitude: state.Longtitude,\n    photosData: state.PhotosData\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    receivePhotosData: (lat, lon, page) =>\n      dispatch(receivePhotosData(lat, lon, page)),\n    addPhotosToFavouritesList: photo =>\n      dispatch(addPhotosToFavouritesList(photo)),\n    resetPhotos: () => dispatch(resetPhotosData())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gallery);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Col, Row } from \"antd\";\nimport { connect } from \"react-redux\";\nimport \"./FavouritesList.css\";\n\nclass FavouritesList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      photos: []\n    };\n  }\n\n  getCard = () => {\n    return this.props.favouritesPhoto.photos.map(photo => (\n      <Col md={12} xs={24} key={photo.id}>\n        <Card\n          hoverable\n          title={photo.title}\n          bordered={false}\n          style={{ marginBottom: \"10px\" }}\n          cover={\n            <img\n              alt={photo.title}\n              src={`https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_b.jpg`}\n            />\n          }\n        />\n      </Col>\n    ));\n  };\n\n  render() {\n    return (\n      <div className=\"favourites-list\">\n        <h1>Favourites list</h1>\n        <div className=\"back-to-gallery\">\n          <Link to=\"/gallery\"> Back to Gallery</Link>\n        </div>\n        <Row gutter={16}>\n          {/* {\n            this.getCard()\n          } */}\n          {this.props.favouritesPhoto.photos.length !== 0 ? (\n            this.getCard()\n          ) : (\n            <Col lg={8} md={12} xs={24} style={{ textAlign: \"center\" }}>\n              <h1>Sorry, no images for this position.</h1>\n            </Col>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    favouritesPhoto: state.FavouritesPhotos\n  };\n}\n\nexport default connect(mapStateToProps)(FavouritesList);\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport SearchArea from \"./SearchArea\";\nimport Gallery from \"./Gallery\";\nimport FavouritesList from \"./FavouritesList\";\nimport \"./App.css\";\n\nexport default () => {\n  return (\n    <div className=\"app\">\n      <SearchArea />\n      <Switch>\n        <Route path=\"/\" exact component={Gallery} />\n        <Route path=\"/favourites-list\" component={FavouritesList} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n};\n","/*\n    The reducer is a function, which used to return new state based on the prevState and actions\n*/\nimport { combineReducers } from \"redux\";\nimport storageUtils from \"../utils/storageUtils\";\nimport {\n  SET_LATITUDE,\n  SET_LONGTITUDE,\n  RECEIVE_PHOTOS_DATA,\n  ADD_PHOTOS_TO_FAVOURITES_LIST,\n  RESET_PHOTOS_DATA\n} from \"./action-types\";\n\n// The function is used to set the latitude\nconst initialLat = -33.8548157;\nfunction Latitude(state = initialLat, action) {\n  switch (action.type) {\n    case SET_LATITUDE:\n      return action.lat;\n    default:\n      return state;\n  }\n}\n\n// The function is used to set the longtitude\nconst initialLon = 151.2164539;\nfunction Longtitude(state = initialLon, action) {\n  switch (action.type) {\n    case SET_LONGTITUDE:\n      return action.lon;\n    default:\n      return state;\n  }\n}\n\n// The function is get the photos data\nconst initialPhotosData = storageUtils.getPhotosData();\nfunction PhotosData(state = initialPhotosData, action) {\n  switch (action.type) {\n    case RECEIVE_PHOTOS_DATA:\n      return action.data;\n    case RESET_PHOTOS_DATA:\n      return {};\n    default:\n      return state;\n  }\n}\n\n// The function is used to save photos to the favourites list\nconst initialPhotos = {\n  photos: []\n};\nfunction FavouritesPhotos(state = initialPhotos, action) {\n  switch (action.type) {\n    case ADD_PHOTOS_TO_FAVOURITES_LIST:\n      return {\n        ...state,\n        photos: [...state.photos, action.photo]\n      };\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  Latitude,\n  Longtitude,\n  PhotosData,\n  FavouritesPhotos\n});\n","/*\n    A store holds the whole state tree of the application\n*/\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducer from './reducer';\n\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport store from './app/redux/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <Provider store={store}>\n      <BrowserRouter>\n          <App />\n      </BrowserRouter>\n  </Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}